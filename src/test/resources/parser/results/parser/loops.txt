program [line 1, offset 0:4]
    stmts [line 1, offset 0:4]
        stmt:exprStmt [line 1, offset 0:4]
            expr:whileExpr [line 1, offset 0:4]
                whileLoop [line 1, offset 0:4]
                    'while': while
                    expr:literalExpr [line 1, offset 6:9]
                        literal [line 1, offset 6:9]
                            BOOL_LIT: True
                    block [line 1, offset 11:11]
                        '{': {
                        stmts [line 1, offset 13:17]
                            stmt:exprStmt [line 1, offset 13:17]
                                expr:breakExpr [line 1, offset 13:17]
                                    'break': break
                        '}': }
        stmt:exprStmt [line 2, offset 21:23]
            expr:forExpr [line 2, offset 21:23]
                forLoop [line 2, offset 21:23]
                    'for': for
                    pattern [line 2, offset 25:25]
                        simplePattern:wildcardPattern [line 2, offset 25:25]
                            '_': _
                    'in': in
                    expr:pathExpr [line 2, offset 30:39]
                        path [line 2, offset 30:39]
                            IDENT: bulbulator
                    block [line 2, offset 41:41]
                        '{': {
                        stmts [line 2, offset 43:50]
                            stmt:exprStmt [line 2, offset 43:50]
                                expr:continueExpr [line 2, offset 43:50]
                                    'continue': continue
                        '}': }
        stmt:exprStmt [line 3, offset 54:57]
            expr:loopExpr [line 3, offset 54:57]
                loop [line 3, offset 54:57]
                    'loop': loop
                    block [line 3, offset 59:59]
                        '{': {
                        stmts [line 3, offset 60:60]
                        '}': }
        stmt:assignStmt [line 5, offset 63:63]
            pattern [line 5, offset 63:63]
                simplePattern:wildcardPattern [line 5, offset 63:63]
                    '_': _
            '=': =
            expr:loopExpr [line 5, offset 67:70]
                loop [line 5, offset 67:70]
                    'loop': loop
                    block [line 5, offset 72:72]
                        '{': {
                        stmts [line 6, offset 78:82]
                            stmt:exprStmt [line 6, offset 78:82]
                                expr:breakExpr [line 6, offset 78:82]
                                    'break': break
                        '}': }
    EOF: <EOF>
