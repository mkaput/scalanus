program
    stmts
        stmt:exprStmt
            expr:subExpr
                expr:addExpr
                    expr:pathExpr
                        path
                            IDENT: x
                    '+': +
                    expr:pathExpr
                        path
                            IDENT: y
                '-': -
                expr:mulExpr
                    expr:pathExpr
                        path
                            IDENT: z
                    '*': *
                    expr:literalExpr
                        literal
                            INT_LIT: 0
        ';': ;
        stmt:exprStmt
            expr:mulExpr
                expr:parenExpr
                    '(': (
                    expr:addExpr
                        expr:pathExpr
                            path
                                IDENT: x
                        '+': +
                        expr:pathExpr
                            path
                                IDENT: y
                    ')': )
                '*': *
                expr:pathExpr
                    path
                        IDENT: z
        ';': ;
        stmt:assignStmt
            pattern
                simplePattern:pathPattern
                    path
                        IDENT: t
            '=': =
            expr:tupleExpr
                tuple
                    '(': (
                    expr:literalExpr
                        literal
                            INT_LIT: 0
                    ',': ,
                    expr:literalExpr
                        literal
                            INT_LIT: 1
                    ',': ,
                    expr:literalExpr
                        literal
                            INT_LIT: 2
                    ')': )
        ';': ;
        stmt:assignStmt
            pattern
                simplePattern:pathPattern
                    path
                        IDENT: t
            '=': =
            expr:tupleExpr
                tuple
                    '(': (
                    expr:literalExpr
                        literal
                            INT_LIT: 0
                    ',': ,
                    expr:literalExpr
                        literal
                            INT_LIT: 1
                    ',': ,
                    expr:literalExpr
                        literal
                            INT_LIT: 2
                    ',': ,
                    ')': )
        ';': ;
        stmt:exprStmt
            expr:memAccExpr
                expr:pathExpr
                    path
                        IDENT: t
                '.': .
                IDENT: a
        ';': ;
        stmt:exprStmt
            expr:fnCallExpr
                expr:memAccExpr
                    expr:pathExpr
                        path
                            IDENT: f
                    '.': .
                    IDENT: m
                '(': (
                ')': )
        ';': ;
        stmt:exprStmt
            expr:fnCallExpr
                expr:idxAccExpr
                    expr:pathExpr
                        path
                            IDENT: f
                    '[': [
                    expr:literalExpr
                        literal
                            STRING_LIT: "m"
                    ']': ]
                '(': (
                ')': )
        ';': ;
        stmt:exprStmt
            expr:fnCallExpr
                expr:pathExpr
                    path
                        IDENT: f
                '(': (
                ')': )
        ';': ;
        stmt:assignStmt
            pattern
                simplePattern:pathPattern
                    path
                        IDENT: t
            '=': =
            expr:literalExpr
                literal
                    unit
                        '(': (
                        ')': )
        ';': ;
        stmt:exprStmt
            expr:blockExpr
                block
                    '{': {
                    stmts
                    '}': }
        stmt:exprStmt
            expr:blockExpr
                block
                    '{': {
                    stmts
                        stmt:exprStmt
                            expr:fnCallExpr
                                expr:memAccExpr
                                    expr:blockExpr
                                        block
                                            '{': {
                                            stmts
                                                stmt:exprStmt
                                                    expr:literalExpr
                                                        literal
                                                            INT_LIT: 92
                                            '}': }
                                    '.': .
                                    IDENT: foo_bar
                                '(': (
                                ')': )
                    '}': }
        stmt:exprStmt
            expr:returnExpr
                'return': return
                expr:addExpr
                    expr:parenExpr
                        '(': (
                        expr:eqExpr
                            expr:pathExpr
                                path
                                    IDENT: x
                            '==': ==
                            expr:pathExpr
                                path
                                    IDENT: y
                        ')': )
                    '+': +
                    expr:literalExpr
                        literal
                            INT_LIT: 1
        ';': ;
    EOF: <EOF>
